pub fn main() !void {
    glfw.setErrorCallback(errorCallback);
    if (!glfw.init(.{})) {
        std.log.err("failed to initialize GLFW: {?s}", .{glfw.getErrorString()});
        std.process.exit(1);
    }

    defer glfw.terminate();

    // Create our window
    const window = glfw.Window.create(640, 480, "Hello, mach-glfw!", null, null, .{}) orelse {
        std.log.err("failed to create GLFW window: {?s}", .{glfw.getErrorString()});
        std.process.exit(1);
    };
    defer window.destroy();

    glfw.makeContextCurrent(window);
    defer glfw.makeContextCurrent(null);

    // turn on VSync
    glfw.swapInterval(1);

    if (!gl_procs.init(glfw.getProcAddress)) {
        std.log.err("failed to load OpenGL functions", .{});
        std.process.exit(1);
    }

    gl.makeProcTableCurrent(&gl_procs);
    defer gl.makeProcTableCurrent(null);

    const points: [9]f32 = [_]f32{
        -0.5, -0.5, 0.0,
        0.5,  -0.5, 0.0,
        0.0,  0.5,  0.0,
    };

    //Gotta do some shader things

    const vertex_shader_source =
        \\#version 410 core
        \\
        \\
        \\in vec3 vp;
        \\
        \\void main() {
        \\      gl_Position = vec4(vp, 1.0);
        \\}
        \\
    ;
    const fragment_shader_source =
        \\#version 410 core
        \\
        \\out vec4 frag_colour;
        \\
        \\
        \\void main() {
        \\      frag_colour = vec4(0.5, 0.0, 0.5, 1.0);
        \\}
        \\
    ;
    const program: gl.uint = try create_program(&[1][*]const u8{vertex_shader_source}, &[1][*]const u8{fragment_shader_source}, vertex_shader_source.len, fragment_shader_source.len);
    defer gl.DeleteProgram(program);

    gl.UseProgram(program);
    defer gl.UseProgram(0);
    //Bind Vertex Array
    var vao: c_uint = undefined;
    gl.GenVertexArrays(1, @ptrCast(&vao));
    defer gl.DeleteVertexArrays(1, @ptrCast(&vao));
    gl.BindVertexArray(vao);
    defer gl.BindVertexArray(0);

    //Bind Vertex Buffer
    var vbo: c_uint = undefined;
    gl.GenBuffers(1, @ptrCast(&vbo));
    defer gl.DeleteBuffers(1, @ptrCast(&vbo));
    gl.BindBuffer(gl.ARRAY_BUFFER, vbo);
    defer gl.BindBuffer(gl.ARRAY_BUFFER, 0);

    gl.BufferData(gl.ARRAY_BUFFER, 9 * @sizeOf(f32), &points, gl.STATIC_DRAW);

    gl.VertexAttribPointer(0, 3, gl.FLOAT, gl.FALSE, 0, 0);

    // Wait for the user to close the window.
    while (!window.shouldClose()) {
        // Update the viewport to reflect any changes to the window's size.
        const fb_size = window.getFramebufferSize();
        gl.Viewport(0, 0, @intCast(fb_size.width), @intCast(fb_size.height));

        // Clear the window.
        gl.ClearBufferfv(gl.COLOR, 0, &[4]f32{ 1, 1, 1, 1 });
        gl.DrawArrays(gl.TRIANGLES, 0, points.len);

        window.swapBuffers();
        glfw.pollEvents();
    }
}
